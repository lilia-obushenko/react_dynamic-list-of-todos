{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/FilterType.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","helpers/helpers.ts","App.tsx","index.tsx"],"names":["TodoList","props","todos","selectedTodo","onSelectTodo","className","map","todo","title","id","completed","cn","type","onClick","options","TodoFilter","value","filterTypeValue","onFilterType","onQueryChange","onChange","target","option","toLowerCase","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","Loader","TodoModal","onClose","userId","useState","user","setUser","useEffect","getUser","result","catch","error","Error","href","email","name","App","setTodos","setSelectedTodo","query","setQuery","ALL","filterType","setFilterType","visibleTodos","useMemo","filter","searchText","includes","trim","ACTIVE","COMPLETED","getFilteredTodos","handleSelectTodo","useCallback","handleCloseModal","length","ReactDOM","render","document","getElementById"],"mappings":"oPAUaA,EAAsB,SAACC,GAClC,IAAQC,EAAsCD,EAAtCC,MAAOC,EAA+BF,EAA/BE,aAAcC,EAAiBH,EAAjBG,aAE7B,OACE,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GACT,IAAQC,EAAyBD,EAAzBC,MAAOC,EAAkBF,EAAlBE,GAAIC,EAAcH,EAAdG,UAEnB,OACE,qBAEE,UAAQ,OACRL,UAAU,GAHZ,UAKE,oBAAIA,UAAU,eAAd,SAA8BI,IAE9B,oBAAIJ,UAAU,eAAd,SACGK,GACC,sBAAML,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWM,IAAG,CACf,mBAAoBD,EACpB,mBAAoBA,IAFtB,SAKGF,MAIL,oBAAIH,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVO,KAAK,SACLC,QAAS,WACPT,EAAaG,IALjB,SAQE,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAWM,IAAG,MAAO,CACtB,SAAUR,IAAiBI,EAC3B,eAAgBJ,IAAiBI,cApCpCE,YC/BbK,EAAU,CAAC,MAAO,SAAU,aASrBC,EAAwB,SAACd,GACpC,IACEe,EAIEf,EAJFe,MACAC,EAGEhB,EAHFgB,gBACAC,EAEEjB,EAFFiB,aACAC,EACElB,EADFkB,cAGF,OACE,uBAAMd,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACE,UAAQ,eACRW,MAAOC,EACPG,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXH,EAAaG,EAAOL,QAJxB,SAOGF,EAAQR,KAAI,SAAAgB,GAAM,OACjB,wBACEN,MAAOM,EAAOC,cADhB,SAIGD,GAFIA,YASf,oBAAGjB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRO,KAAK,OACLI,MAAOA,EACPX,UAAU,QACVmB,YAAY,YACZJ,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXF,EAAcE,EAAOL,UAGzB,sBAAMX,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdW,GACC,sBACEX,UAAU,gBACVoB,MAAO,CAAEC,cAAe,OAF1B,SAIE,wBACE,UAAQ,oBACR,aAAW,cACXd,KAAK,SACLP,UAAU,SACVQ,QAAS,kBAAMM,EAAc,gBCtD3C,SAASQ,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,ICxBKC,ECGCC,EAAmB,kBAC9B,qBAAKlC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uBCMNmC,EAA6B,SAACvC,GACzC,IAAQE,EAA0BF,EAA1BE,aAAcsC,EAAYxC,EAAZwC,QAEpBhC,EAIEN,EAJFM,GACAD,EAGEL,EAHFK,MACAkC,EAEEvC,EAFFuC,OACAhC,EACEP,EADFO,UAGF,EAAwBiC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KAUA,OARAC,qBAAU,YHIW,SAACJ,GAAD,OAAoBf,EAAG,iBAAiBe,KGH3DK,CAAQL,GACLR,MAAK,SAAAc,GAAM,OAAIH,EAAQG,MACvBC,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,QAEnB,CAACN,IAGF,sBAAKvC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbuC,EAGA,sBAAKvC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYI,KAGZ,wBACEG,KAAK,SACLP,UAAU,SACV,UAAQ,cACR,aAAW,gBACXQ,QAAS4B,OAIb,sBAAKpC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGG,IAGH,oBAAGH,UAAU,QAAQ,UAAQ,aAA7B,UACGK,EACC,wBAAQL,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAG+C,KAAI,wBAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,OAAzB,gBACGT,QADH,IACGA,OADH,EACGA,EAAMU,gBAnCf,cAAC,EAAD,S,SFnCIhB,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KGGL,ICiBMiB,EAAU,WACrB,MAA0BZ,mBAAiB,IAA3C,mBAAOzC,EAAP,KAAcsD,EAAd,KACA,EAAwCb,mBAAsB,MAA9D,mBAAOxC,EAAP,KAAqBsD,EAArB,KACA,EAA0Bd,mBAAS,IAAnC,mBAAOe,EAAP,KAAcC,EAAd,KACA,EAAoChB,mBAASL,EAAWsB,KAAxD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAeC,mBAAQ,WAC3B,ODpB4B,SAC9B9D,EACA2D,EACAH,GAIA,OAFmBxD,EAAM+D,QAAO,gBATSC,EASN1D,EAAH,EAAGA,MAAH,OATS0D,EASuBR,EAAPlD,EAR1Ce,cAAc4C,SAASD,EAAW3C,cAAc6C,WAU7CH,QAAO,SAAA1D,GACvB,OAAQsD,GACN,KAAKvB,EAAW+B,OACd,OAAQ9D,EAAKG,UAEf,KAAK4B,EAAWgC,UACd,OAAO/D,EAAKG,UAEd,QACE,OAAOH,MCIJgE,CAAiBrE,EAAO2D,EAAYH,KAC1C,CAACxD,EAAO2D,EAAYH,IAEvBZ,qBAAU,WLNkBnB,EAAY,UKQnCO,MAAK,SAAAc,GAAM,OAAIQ,EAASR,MACxBC,OAAM,SAAAC,GACL,MAAM,IAAIC,MAAMD,QAEnB,IAEH,IAAMsB,EAAmBC,uBAAY,SAAClE,GACpCkD,EAAgBlD,KACf,IAEGmE,EAAmBD,uBAAY,WACnChB,EAAgB,QACf,IAEH,OACE,qCACE,qBAAKpD,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEW,MAAO0C,EACPzC,gBAAiB4C,EACjB3C,aAAc4C,EACd3C,cAAewC,MAInB,qBAAKtD,UAAU,QAAf,SACGH,EAAMyE,OAAS,EACd,cAAC,EAAD,CACEzE,MAAO6D,EACP5D,aAAcA,EACdC,aAAcoE,IAGhB,cAAC,EAAD,aAOTrE,GACC,cAAC,EAAD,CACEA,aAAcA,EACdsC,QAASiC,QC7EnBE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.71c0cd07.chunk.js","sourcesContent":["import { FC } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  onSelectTodo: (todo: Todo) => void,\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const { todos, selectedTodo, onSelectTodo } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { title, id, completed } = todo;\n\n          return (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className=\"\"\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={cn({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onSelectTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('far', {\n                      'fa-eye': selectedTodo !== todo,\n                      'fa-eye-slash': selectedTodo === todo,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\nimport { FilterType } from '../../types/FilterType';\n\nconst options = ['All', 'Active', 'Completed'];\n\ninterface Props {\n  value: string,\n  filterTypeValue: FilterType,\n  onQueryChange: (query: string) => void\n  onFilterType: (filterTypeValue: FilterType) => void\n}\n\nexport const TodoFilter: FC<Props> = (props) => {\n  const {\n    value,\n    filterTypeValue,\n    onFilterType,\n    onQueryChange,\n  } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterTypeValue}\n            onChange={({ target }) => {\n              onFilterType(target.value as FilterType);\n            }}\n          >\n            {options.map(option => (\n              <option\n                value={option.toLowerCase()}\n                key={option}\n              >\n                {option}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={value}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={({ target }) => {\n            onQueryChange(target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {value && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clear field\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo,\n  onClose: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = (props) => {\n  const { selectedTodo, onClose } = props;\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = selectedTodo;\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(result => setUser(result))\n      .catch(error => {\n        throw new Error(error);\n      });\n  }, [user]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close a modal\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { FilterType } from '../types/FilterType';\nimport { Todo } from '../types/Todo';\n\nexport const findTodos = (content: string, searchText: string) => {\n  return content.toLowerCase().includes(searchText.toLowerCase().trim());\n};\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  filterType: FilterType,\n  query: string,\n) => {\n  const shownTodos = todos.filter(({ title }) => findTodos(title, query));\n\n  return shownTodos.filter(todo => {\n    switch (filterType) {\n      case FilterType.ACTIVE:\n        return !todo.completed;\n\n      case FilterType.COMPLETED:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers/helpers';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState(FilterType.ALL);\n\n  const visibleTodos = useMemo(() => {\n    return getFilteredTodos(todos, filterType, query);\n  }, [todos, filterType, query]);\n\n  useEffect(() => {\n    getTodos()\n      .then(result => setTodos(result))\n      .catch(error => {\n        throw new Error(error);\n      });\n  }, []);\n\n  const handleSelectTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const handleCloseModal = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={query}\n                filterTypeValue={filterType}\n                onFilterType={setFilterType}\n                onQueryChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length > 0 ? (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  onSelectTodo={handleSelectTodo}\n                />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}